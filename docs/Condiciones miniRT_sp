El objetivo de su programa es generar imágenes utilizando el protocolo Raytracing.
Esas imágenes generadas por computadora representarán cada una una escena, vista
desde un ángulo y una posición específicos, definidos por objetos geométricos
simples, y cada uno con su propio sistema de iluminación.

Las restricciones son las siguientes:
• Debe utilizar miniLibX. Ya sea la versión que esté disponible en el sistema
operativo o desde sus fuentes. Si elige trabajar con las fuentes, deberá aplicar
las mismas reglas para su libft que las escritas anteriormente en la parte de
Instrucciones comunes.
• La gestión de su ventana debe permanecer fluida: cambiar a otra ventana,
minimizar, etc.
• Necesita al menos estos 3 objetos geométricos simples: plano, esfera y cilindro.
• Si corresponde, todas las intersecciones posibles y el interior del objeto
deben manejarse correctamente.
• Su programa debe poder cambiar el tamaño de las propiedades únicas del objeto:
diámetro para una esfera y ancho y alto para un cilindro.
• Su programa debe poder aplicar transformaciones de traslación y rotación a
objetos, luces y cámaras (excepto esferas y luces que no se pueden rotar).
• Gestión de la luz: brillo puntual, sombras duras, iluminación de ambiente
(los objetos nunca están completamente a oscuras). Debe implementar iluminación
ambiental y difusa.
• El programa muestra la imagen en una ventana y respeta las siguientes reglas:
◦ Al presionar ESC, se debe cerrar la ventana y salir del programa sin problemas.
◦ Al hacer clic en la cruz roja en el marco de la ventana, se debe cerrar la
ventana y salir del programa sin problemas.
◦ Se recomienda encarecidamente el uso de imágenes de minilibX.
• Su programa debe tomar como primer argumento un archivo de descripción de
escena con la extensión .rt.
◦ Cada tipo de elemento puede estar separado por uno o más saltos de línea.
◦ Cada tipo de información de un elemento puede estar separado por uno o más
espacios.
◦ Cada tipo de elemento puede colocarse en cualquier orden en el archivo.
◦ Los elementos definidos con una letra mayúscula solo se pueden declarar una
vez en la escena.



La parte obligatoria debe cumplir con las siguientes reglas:
Su programa debe tomar como primer argumento un archivo de descripción de escena
con la extensión .rt.
◦ Cada tipo de elemento puede separarse con uno o más saltos de línea.
◦ Cada tipo de información de un elemento puede separarse con uno o más espacios.
◦ Cada tipo de elemento puede configurarse en cualquier orden dentro del archivo.
◦ Los elementos definidos con mayúscula solo pueden declararse una vez en la escena.
◦ La información de cada elemento es primero el identificador de tipo
(compuesto por uno o dos caracteres), seguido de la información específica de
cada objeto en un orden estricto, como:
◦ Iluminación ambiental:
A 0.2 255,255,255
∗ Identificador: A
∗ Relación de iluminación ambiental en el rango [0.0,1.0]: 0.2
∗ Colores R,G,B en el rango [0-255]: 255, 255, 255
◦ Cámara:
C -50.0,0,20 0,0,1 70
∗ Identificador: C
∗ Coordenadas x,y,z del punto de vista: -50.0,0,20
∗ Vector de orientación normalizado 3D. En el rango [-1,1] para cada eje x, y,
z: 0.0, 0.0, 1.0
∗ FOV: Campo de visión horizontal en grados en el rango [0, 180]: 70
◦ Luz:
L -40.0, 50.0, 0.0 0.6 10, 0, 255
∗ Identificador: L
∗ Coordenadas x, y, z del punto de luz: -40.0, 50.0, 0.0
∗ Relación de brillo de la luz en el rango [0.0, 1.0]: 0.6
∗ (no usado en la parte obligatoria) Colores R, G, B en el rango [0-255]: 10, 0,
255
◦ Esfera:
sp 0.0, 0.0, 20.6 12.6 10, 0, 255
∗ Identificador: sp
∗Coordenadas x, y, z del centro de la esfera: 0.0, 0.0, 20.6
∗Diámetro de la esfera: 12.6
∗Colores R, G, B en el rango [0-255]: 10, 0, 255
◦Plano:
pl 0.0, 0.0, -10.0 0.0, 1.0, 0.0 0, 0, 225
∗Identificador: pl
∗Coordenadas x, y, z de un punto en el plano: 0.0, 0.0, -10.0
∗Vector normal normalizado tridimensional. En el rango [-1,1] para cada eje x,
y, z: 0.0, 1.0, 0.0
∗Colores R, G, B en el rango [0-255]: 0, 0, 225
◦Cilindro:
cy 50.0, 0.0, 20.6 0.0, 0.0, 1.0 14.2 21.42 10, 0, 255
∗Identificador: cy
∗Coordenadas x, y, z del centro del cilindro: 50.0, 0.0, 20.6
∗Vector normalizado tridimensional del eje del cilindro. En el rango [-1,1] para
cada eje x, y, z: 0.0, 0.0, 1.0
∗Diámetro del cilindro: 14.2
∗Altura del cilindro: 21.42
∗Colores R, G, B en el rango [0, 255]: 10, 0, 255
•Ejemplo de la parte obligatoria con una escena .rt minimalista:

A 0.2 255, 255, 255
C -50, 0, 20 0, 0, 1 70
L -40, 0, 30 0.7 255, 255, 255
pl 0, 0, 0, 1.0, 0 255, 0, 225
sp 0, 0, 20 255, 0, 0
cy 50.0, 0, 0, 20.6 0, 0, 1.0, 14.2 21.42 10,0,255

•Si se detecta cualquier error de configuración en el archivo, el programa debe
cerrarse correctamente y devolver "Error\n" seguido de un mensaje de error
explícito de su elección.
•Para la defensa, sería ideal contar con un conjunto completo de escenas
centradas en lo funcional, para facilitar el control de los elementos a crear.

Para la realización de este proyecto necesitaremos:
- Crear un parser que lea el archivo .rt y cree una estructura de datos
 con la información de la escena. OK
- Crear una función que genere la imagen de la escena.OK
- Crear una función que muestre la imagen en una ventana. OK
- Crear una función que maneje los eventos de la ventana. OK
- Crear una función que libere la memoria utilizada. OK
- Crear una función que maneje los errores. OK
- Generador de rayos. OK
- Crear una función que maneje las intersecciones de los rayos con los objetos. OK
- Crear una función que maneje los objetos geométricos. OK PARCIAL (ESFERA)
- Crear una función que maneje las cámaras.
- Crear una función que maneje las luces.
- Crear una función que maneje los colores.
- Crear una función que maneje los vectores.
- Crear una función que maneje las matrices.
- Crear una función que maneje las transformaciones de las cámaras.
- Crear una función que maneje las transformaciones de las luces.
- Crear una función que maneje las transformaciones de los objetos.
	Función de traslación.
	Función de rotación.
	Función de escalado.
	Función de reflexión.???
	Función de proyección.???
- Crear una función que maneje las intersecciones de los objetos.
- Crear una función que maneje la iluminación de la escena.
- Crear una función que maneje las sombras.
- Crear una función que maneje la iluminación ambiental.
- Crear una función que maneje la iluminación difusa.
- Crear una función que maneje la iluminación especular.
- Crear una función que maneje la reflexión de la luz.
- Crear una función que maneje la refracción de la luz.
- Crear una función que maneje la textura de los objetos.

El algoritmo de Raytracing en pseudocodigo es el siguiente:

for each pixel do
		compute viewing ray
		if (ray hits an object with t ∈[0,∞)) then
			Compute n
			Evaluate shading model and set pixel to
			that color
		else
			set pixel color to background color

En resumen, para cada pixel de la imagen (canva), generamos un rayo que va
desde la cámara hasta el pixel, calculamos si el rayo intersecta con algún
objeto de la escena, si intersecta calculamos la normal (vector) del objeto en
el punto de intersección y aplicamos el modelo de iluminación para obtener el
color del pixel, si no intersecta con ningún objeto, el color del pixel es el
color de fondo.

PASOS A SEGUIR:
1. Crear la estructura de datos de la escena. OK
2. Crear el parser que lea el archivo .rt y llene la estructura de datos. OK
3. Crear la función que genere la imagen de la escena. OK
4. Crear la función que muestre la imagen en una ventana. OK
5. Crear la función que maneje los eventos de la ventana. OK
6. Crear la función que libere la memoria utilizada. OK
7. Crear la función que maneje los errores. OK
8. Crear la función que maneje los rayos. OK
8. Crear la función que maneje las intersecciones de los rayos con los objetos.OK
9. Crear la función que maneje los objetos geométricos.
	Esfera OK
	Plano 
	Cilindro
10. Crear la función que maneje las cámaras.
11. Crear la función que maneje las luces.
	Ambiental
	Puntual
12. Crear la función que maneje los colores (rgb).
13. Crear la función que maneje los vectores.
14. Crear la función que maneje las matrices.
15. Crear una función que maneje las transformaciones de las cámaras.
16. Crear una función que maneje las transformaciones de las luces.
17. Crear una función que maneje las transformaciones de los objetos.
18. Crear una función que maneje las intersecciones de los objetos.
19. Crear una función que maneje la iluminación de la escena.
20. Crear una función que maneje las sombras.
21. Crear una función que maneje la iluminación ambiental.
22. Crear una función que maneje la iluminación difusa.
23. Crear una función que maneje la iluminación especular.
24. Crear una función que maneje la reflexión de la luz.
25. Crear una función que maneje la refracción de la luz.
26. Crear una función que maneje la textura de los objetos.

Transformación de corte

Una transformación de corte (o sesgo) tiene el efecto de inclinar las líneas
rectas. Probablemente sea la transformación más compleja (visualmente) que
implementaremos, aunque su implementación no es más complicada que la de las
demás. Al aplicarse a una tupla, una transformación de corte cambia cada
componente de la tupla proporcionalmente a los otros dos. Por lo tanto, el
componente X cambia proporcionalmente a YZ, y el componente Y cambia
proporcionalmente a XZ, y el componente Z cambia proporcionalmente a XY.
La siguiente ilustración muestra cómo funciona esto en dos dimensiones.
Observe específicamente cómo la misma transformación afecta de forma diferente
a cada punto en X a medida que cambia el componente Y. ...

los numeros de tecla para mac
flecha arriba es 65362
flecha abajo  es 65364
flecha derecha es 65363
flecha izquierda es 65361
espacio es 32
enter es 65293